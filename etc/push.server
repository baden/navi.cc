    server {
        listen           9080 default_server;
        #listen          9443 ssl;
        #ssl_certificate     /usr/local/nginx/ssl/server.crt;
        #ssl_certificate_key /usr/local/nginx/ssl/server.key;
        server_name     localhost;

        location /channels-stats {
            # activate channels statistics mode for this location
            push_stream_channels_statistics;

            # query string based channel id
            set $push_stream_channel_id             $arg_id;
        }

        location /pub {
            # activate publisher mode for this location, with admin support
            push_stream_publisher admin;

            # query string based channel id
            set $push_stream_channel_id             $arg_id;

            # store messages in memory
            push_stream_store_messages              off;

            push_stream_keepalive                   on;

            # Message size limit
            # client_max_body_size MUST be equal to client_body_buffer_size or
            # you will be sorry.
            client_max_body_size                    32k;
            client_body_buffer_size                 32k;
        }

        location ~ /sub/(.*) {
            # activate subscriber mode for this location
            push_stream_subscriber;

            # positional channel path
            set $push_stream_channels_path              $1;

            # header to be sent when receiving new subscriber connection
            push_stream_header_template                 "<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n<meta http-equiv=\"Cache-Control\" content=\"no-store\">\r\n<meta http-equiv=\"Cache-Control\" content=\"no-cache\">\r\n<meta http-equiv=\"Pragma\" content=\"no-cache\">\r\n<meta http-equiv=\"Expires\" content=\"Thu, 1 Jan 1970 00:00:00 GMT\">\r\n<script type=\"text/javascript\">\r\nwindow.onError = null;\r\ntry{ document.domain = (window.location.hostname.match(/^(\d{1,3}\.){3}\d{1,3}$/)) ? window.location.hostname : window.location.hostname.split('.').slice(-2).join('.');}catch(e){}\r\nparent.PushStream.register(this);\r\n</script>\r\n</head>\r\n<body>";
            # message template
            #push_stream_message_template                "<script>p(~id~,'~channel~','~text~','~event-id~');</script>";
            push_stream_message_template                "<script>p(~id~,'~channel~','~text~');</script>";
            # footer to be sent when finishing subscriber connection
            push_stream_footer_template                 "</body></html>";
            # content-type
            push_stream_content_type                    "text/html; charset=utf-8";
        }

        location ~ /ev/(.*) {
            # activate subscriber mode for this location
            push_stream_subscriber;

            # positional channel path
            set $push_stream_channels_path              $1;

            # activate event source support for this location
            push_stream_eventsource_support on;
        }

        location ~ /lp/(.*) {
            # activate long-polling mode for this location
            push_stream_subscriber      long-polling;

            # positional channel path
            set $push_stream_channels_path    $1;
        }

        location ~ /ws/(.*) {
            # activate websocket mode for this location
            push_stream_websocket;

            # positional channel path
            set $push_stream_channels_path              $1;

            # store messages in memory
            push_stream_store_messages              on;

            push_stream_message_template                "{\"id\":~id~,\"channel\":\"~channel~\",\"text\":\"~text~\"}";

            push_stream_websocket_allow_publish         on;

            # ping frequency
            push_stream_ping_message_interval           10s;
        }
    }
